<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAVA基础面试题（上）</title>
    <url>/2025/02/06/JAVA%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Java-语言有那些特点"><a href="#Java-语言有那些特点" class="headerlink" title="Java 语言有那些特点"></a>Java 语言有那些特点</h2><ul>
<li>简单易学（语法简单，上手容易）</li>
<li>面向对象（封装、继承、多态）</li>
<li>平台无关性（ Java 虚拟机实现平台无关性）</li>
<li>支持多线程</li>
<li>可靠性（具备异常处理和自动内存管理机制）</li>
<li>安全性（ Java 语言本身的设计就提供了多重安全防护机制如访问权限修饰符、限制程序直接访问操作系统资源）</li>
<li>高效性</li>
<li>支持网络编程</li>
<li>编译与解释并存</li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="Java-中的注释有几种形式？"><a href="#Java-中的注释有几种形式？" class="headerlink" title="Java 中的注释有几种形式？"></a>Java 中的注释有几种形式？</h3><h4 id="Java-中的注释有三种："><a href="#Java-中的注释有三种：" class="headerlink" title="Java 中的注释有三种："></a>Java 中的注释有三种：</h4><ul>
<li>单行注释：通常用于解释方法内某行代码的作用</li>
<li>多行注释：通常用于解释一段代码的作用</li>
<li>文档注释：通常用于生成 Java 开发文档</li>
</ul>
<p>用的比较多的还是单行注释和文档注释，多行注释在实际开发中使用的相对较少</p>
<h3 id="标识符和关键字的区别是什么？"><a href="#标识符和关键字的区别是什么？" class="headerlink" title="标识符和关键字的区别是什么？"></a>标识符和关键字的区别是什么？</h3><p>在我们编写程序的时候，想要大量地为程序、类、变量、方法等取名字，于是就有了标识符。简单来说，标识符就是一个名字。</p>
<p>有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是<strong>关键字</strong>。简单来说，<strong>关键字是被赋予特殊含义的标识符</strong>。比如，在我们日常生活中，如果我们想要开一家店，则要给这个店起一个名字，起的这个“名字”就叫标识符。但是我们店的名字不能叫“警察局”，因为“警察局”这个名字已经被赋予了特殊的含义。而“警察局就是我们生活中的关键字”</p>
<table>
<thead>
<tr>
<th><em>分类</em></th>
<th><em>关键字</em></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>访问控制</td>
<td>private</td>
<td>protected</td>
<td>public</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>类、方法和变量修饰符</td>
<td>abstract</td>
<td>class</td>
<td>extends</td>
<td>final</td>
<td>implements</td>
<td>interface</td>
<td>native</td>
</tr>
<tr>
<td></td>
<td>new</td>
<td>static</td>
<td>strictfp</td>
<td>synchronized</td>
<td>transient</td>
<td>volatile</td>
<td>enum</td>
</tr>
<tr>
<td>程序控制</td>
<td>break</td>
<td>continue</td>
<td>return</td>
<td>do</td>
<td>while</td>
<td>if</td>
<td>else</td>
</tr>
<tr>
<td></td>
<td>for</td>
<td>instanceof</td>
<td>switch</td>
<td>case</td>
<td>default</td>
<td>assert</td>
<td></td>
</tr>
<tr>
<td>错误处理</td>
<td>try</td>
<td>catch</td>
<td>throw</td>
<td>throws</td>
<td>finally</td>
<td></td>
<td></td>
</tr>
<tr>
<td>包相关</td>
<td>import</td>
<td>package</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>基本类型</td>
<td>boolean</td>
<td>byte</td>
<td>char</td>
<td>double</td>
<td>float</td>
<td>int</td>
<td>long</td>
</tr>
<tr>
<td></td>
<td>short</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>变量引用</td>
<td>super</td>
<td>this</td>
<td>void</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>保留字</td>
<td>goto</td>
<td>const</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="Java-中的几种基本数据类型有了解吗？"><a href="#Java-中的几种基本数据类型有了解吗？" class="headerlink" title="Java 中的几种基本数据类型有了解吗？"></a>Java 中的几种基本数据类型有了解吗？</h3><h4 id="Java-中有-8-种基本数据类型，分别为："><a href="#Java-中有-8-种基本数据类型，分别为：" class="headerlink" title="Java 中有 8 种基本数据类型，分别为："></a>Java 中有 8 种基本数据类型，分别为：</h4><ul>
<li>4 种整数类型：byte、short、int、long</li>
<li>2 种浮点型：float、double</li>
<li>1 种字符类型：char</li>
<li>1 种布尔类型：boolean</li>
</ul>
<p>这 8 种基本数据类型的默认值以及所占空间的大小如下：</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>位数</th>
<th>字节</th>
<th>默认值</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>8</td>
<td>1</td>
<td>0</td>
<td>-128 ~ 127</td>
</tr>
<tr>
<td>short</td>
<td>16</td>
<td>2</td>
<td>0</td>
<td>-32768（-2^15） ~ 32767（2^15 - 1）</td>
</tr>
<tr>
<td>int</td>
<td>32</td>
<td>4</td>
<td>0</td>
<td>-2147483648 ~ 2147483647</td>
</tr>
<tr>
<td>long</td>
<td>64</td>
<td>8</td>
<td>0L</td>
<td>-9223372036854775808（-2^63） ~ 9223372036854775807（2^63 -1）</td>
</tr>
<tr>
<td>char</td>
<td>16</td>
<td>2</td>
<td>‘u0000’</td>
<td>0 ~ 65535（2^16 - 1）</td>
</tr>
<tr>
<td>float</td>
<td>32</td>
<td>4</td>
<td>0f</td>
<td>1.4E-45 ~ 3.4028235E38</td>
</tr>
<tr>
<td>double</td>
<td>64</td>
<td>8</td>
<td>0d</td>
<td>4.9E-324 ~ 1.7976931348623157E308</td>
</tr>
<tr>
<td>boolean</td>
<td>1</td>
<td></td>
<td>false</td>
<td>true、false</td>
</tr>
</tbody></table>
<p><strong>注意：</strong></p>
<ol>
<li>Java 里使用 long 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析</li>
<li>Java 里使用 float 类型的数据一定要在数值后面加上 <strong>f</strong> 或 <strong>F</strong>，否则无法通过编译</li>
<li>char a &#x3D; ‘h’  char：单引号， String a &#x3D; “hello”：双引号</li>
</ol>
<p>这八种基本类型都有对应的包装类：Byte、Short、Integer、Long、Float、Double、Character、Boolean</p>
<h4 id="基本类型和包装类型的区别？"><a href="#基本类型和包装类型的区别？" class="headerlink" title="基本类型和包装类型的区别？"></a>基本类型和包装类型的区别？</h4><ul>
<li><p><strong>用途</strong>：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少使用基本类型来定义变量。并且，<strong>包装类型可用于泛型，而基本类型不可以</strong></p>
</li>
<li><p><strong>存储方式</strong>：基本数据类型的局部变量存放在 Java 虚拟机中的局部变量表中，基本数据类型的成员变量（未被 static 修饰）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中</p>
</li>
<li><p><strong>占用空间</strong>：相比包装类型（对象类型），基本数据类型占用的空间往往非常小</p>
</li>
<li><p><strong>默认值</strong>：成员变量包装类型不赋值就是 null，而基本类型有默认值且不是 null</p>
</li>
<li><p><strong>比较方式</strong>：对于基本数据类型来说， &#x3D;&#x3D; 比较的是值。对于包装类型来说， &#x3D;&#x3D; 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 equals() 方法</p>
</li>
<li><p><strong>注意</strong>：基本数据类型存放在栈中是一个常见的误区！基本数据类型的存储位置取决于它们的作用域和声明方式。如果它们是局部变量，那么它们会存放在栈中；如果它们是成员变量，那么它们会存放在堆&#x2F;方法区&#x2F;元空间中</p>
</li>
</ul>
<h4 id="自动装箱与拆箱了解吗？原理是什么？"><a href="#自动装箱与拆箱了解吗？原理是什么？" class="headerlink" title="自动装箱与拆箱了解吗？原理是什么？"></a>自动装箱与拆箱了解吗？原理是什么？</h4><p><strong>什么是自动拆装箱？</strong></p>
<ul>
<li><p><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来</p>
</li>
<li><p><strong>拆箱</strong>：将包装类型转换为基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i; <span class="comment">// 拆箱</span></span><br></pre></td></tr></table></figure>

<p>Integer i &#x3D; 10 等价于 Integer i &#x3D; Integer.valueOf(10);</p>
<p>int n &#x3D; i 等价于 int n &#x3D; i.intValue();</p>
<p>注意：<strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作</strong></p>
</li>
</ul>
<h4 id="超过-long-整型的数据应该如何表示？"><a href="#超过-long-整型的数据应该如何表示？" class="headerlink" title="超过 long 整型的数据应该如何表示？"></a>超过 long 整型的数据应该如何表示？</h4><p>基本数值类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险</p>
<p>在 Java 中，64为 long 整型是最大的整数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">System.out.println(l + <span class="number">1</span>); <span class="comment">// -9223372036854775808</span></span><br><span class="line">System.out.println(l + <span class="number">1</span> == Long.MIN_VALUE); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>BigInteger 内部使用 int[] 数据来存储任意大小的整型数据</p>
<p>相对于常规整数类型的运算来说，BigInteger 运算的效率会相对较低</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="成员变量与局部变量的区别？"><a href="#成员变量与局部变量的区别？" class="headerlink" title="成员变量与局部变量的区别？"></a>成员变量与局部变量的区别？</h3><ul>
<li><strong>语法形式</strong>：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 public、private、static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被final所修饰</li>
<li><strong>存储方式</strong>：从变量在内存中的存储方式来看，如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有使用 static 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存</li>
<li><strong>生存时间</strong>：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡</li>
<li><strong>默认值</strong>：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外：被 final 修饰的成员变量也必须显式地赋值）</li>
</ul>
<h3 id="静态变量有什么作用？"><a href="#静态变量有什么作用？" class="headerlink" title="静态变量有什么作用？"></a>静态变量有什么作用？</h3><p>静态变量也就是被static关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，这样可以节省内存</p>
<p>静态变量是通过类名来访问的（如果被 private 关键字修饰就无法这样访问了）</p>
<h3 id="字符型常量和字符串常量的区别？"><a href="#字符型常量和字符串常量的区别？" class="headerlink" title="字符型常量和字符串常量的区别？"></a>字符型常量和字符串常量的区别？</h3><ul>
<li><strong>形式</strong>：字符常量是单引号引起的一个字符，字符串常量是双引号引起的0个或若干个字符</li>
<li>含义：字符常量相当于一个整型值（ ASCII 值），可以参与表达式运算；字符串常量代表一个地址值（该字符串在内存中存放的位置）</li>
<li><strong>占内存大小</strong>：字符常量只占 2 个字节；字符串常量占若干字节</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="什么是方法的返回值？方法有几种类型？"><a href="#什么是方法的返回值？方法有几种类型？" class="headerlink" title="什么是方法的返回值？方法有几种类型？"></a>什么是方法的返回值？方法有几种类型？</h3><p><strong>方法的返回值</strong> 是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作</p>
<p>按照方法的返回值和参数类型将方法分为下面几种：</p>
<ol>
<li><p><strong>无参数无返回值的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下面这个方法也没有返回值，虽然用到了 return</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        <span class="comment">// 表示结束方法的执行,下方的输出语句不会执行</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>有参数无返回值的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">(Parameter <span class="number">1</span>, ..., Parameter n)</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>有返回值无参数的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>有返回值有参数的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f4</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="静态方法为什么不能调用非静态成员？"><a href="#静态方法为什么不能调用非静态成员？" class="headerlink" title="静态方法为什么不能调用非静态成员？"></a>静态方法为什么不能调用非静态成员？</h3><ol>
<li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，想要通过类的实例对象去访问</li>
<li>在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员属于非法操作</li>
</ol>
<h4 id="静态方法和实例方法有何不同？"><a href="#静态方法和实例方法有何不同？" class="headerlink" title="静态方法和实例方法有何不同？"></a>静态方法和实例方法有何不同？</h4><ol>
<li><p><strong>调用方式</strong></p>
<p>在外部调用静态方法时，可以使用 类名.方法名 的方式，也可以使用 对象.方法名 的方式，而实例方法只能使用 对象.方法名 的方式。也就是说静态方法可以无需创建对象</p>
<p>不过，需要注意的是一般不建议使用 <code>对象.方法名</code> 的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。</p>
</li>
<li><p><strong>访问类成员是否存在限制</strong></p>
<p>静态方法在访问奔类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例变量和实例方法），而实例方法不存在这个限制</p>
</li>
</ol>
<h3 id="重载和重写有什么区别？"><a href="#重载和重写有什么区别？" class="headerlink" title="重载和重写有什么区别？"></a>重载和重写有什么区别？</h3><blockquote>
<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>
<p>重写就是当子类继承父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>
</blockquote>
<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理</p>
<h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写</p>
<ol>
<li>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类</li>
<li>如果父类方法访问修饰符为 private &#x2F; final &#x2F; static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明</li>
<li>构造方法无法被重写</li>
</ol>
<p>综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变</p>
<table>
<thead>
<tr>
<th>区别点</th>
<th>重载方法</th>
<th>重写方法</th>
</tr>
</thead>
<tbody><tr>
<td>发生范围</td>
<td>同一个子类</td>
<td>子类</td>
</tr>
<tr>
<td>参数列表</td>
<td>必须修改</td>
<td>一定不能修改</td>
</tr>
<tr>
<td>返回类型</td>
<td>可修改</td>
<td>子类方法返回值类型比父类方法返回值类型更小或相等</td>
</tr>
<tr>
<td>异常</td>
<td>可修改</td>
<td>子类方法声明抛出的异常类应比声明抛出的异常更小或相等</td>
</tr>
<tr>
<td>访问修饰符</td>
<td>可修改</td>
<td>一定不能做更严格的限制</td>
</tr>
<tr>
<td>发生阶段</td>
<td>编译期</td>
<td>运行期</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>手写 RPC 框架</title>
    <url>/2025/02/08/%E6%89%8B%E5%86%99-RPC-%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="手写-RPC-框架"><a href="#手写-RPC-框架" class="headerlink" title="手写 RPC 框架"></a>手写 RPC 框架</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="什么是-RPC？"><a href="#什么是-RPC？" class="headerlink" title="什么是 RPC？"></a>什么是 RPC？</h3><p>专业定义：RPC（Remote Procedure Call）即远程过程调用，是一种计算机通信协议，它允许程序在不同的计算机之间进行通信和交互，就像本地调用一样。</p>
<p>简单理解，新开了一家买鱼的熟食店，现在你作为消费者想要把鱼皮购买到家。如果是以前，你只能自己跑腿到线下店铺购买，耗时耗力。但现在有了手机、网络、外卖平台，你只需要在家动动手指，就能点个外卖让骑手把鱼配送到家，你不需要关注网络是怎么传输的、外卖平台是怎么操作的、骑手小哥是怎么配送的，只负责享受鱼就行了。</p>
<h3 id="为什么需要-RPC？"><a href="#为什么需要-RPC？" class="headerlink" title="为什么需要 RPC？"></a>为什么需要 RPC？</h3><p>回到 RPC 的概念，RPC 允许一个程序（称为服务消费者）像调用自己程序的方法一样，调用另一个程序（称为服务提供者）的接口，而不需要了解数据的传输处理过程、底层网络通信的细节等。这些都会由 RPC 框架帮你完成，使得开发者可以轻松调用远程服务，快速开发分布式系统。</p>
<p>举个例子，现在有个项目 A 提供了点餐服务，项目 B 想要调用点餐服务完成下单。</p>
<p>点餐服务和接口的示例伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 点餐，返回 orderId</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">order</span><span class="params">(参数 <span class="number">1</span>， 参数 <span class="number">2</span>， 参数 <span class="number">3</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有 RPC 框架，项目 B 怎么调用项目 A 的服务呢?</p>
<p>首先，由于项目 A 和项目 B 都是独立的系统，不能像 SDK 一样作为依赖包引入。那么就想要项目 A 提供 web 服务，并且编写一个点餐接口暴露服务，比如访问 <a href="http://acknight.com/">http://acknight.com</a> 就能调用点餐服务；然后项目 B 作为服务消费者，想要自己构造请求，并通过 HttpClient 请求上述地址。如果项目 B 想要调用更多第三方服务，每个服务和方法的调用都要编写一个 HTTP 请求，那么会非常麻烦。</p>
<p>示例伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">orderId = orderService.order(参数 <span class="number">1</span>, 参数 <span class="number">2</span>, 参数 <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>看起来就跟调用自己项目的方法没有如何区别。</p>
<h2 id="二、RPC框架实现思路"><a href="#二、RPC框架实现思路" class="headerlink" title="二、RPC框架实现思路"></a>二、RPC框架实现思路</h2><h3 id="基本设计"><a href="#基本设计" class="headerlink" title="基本设计"></a>基本设计</h3><p>RPC框架为什么能帮我们简化调用？如何实现一个RPC框架呢？</p>
<p>如下图，有服务消费者和服务提供者两个角色：</p>
<p><img src="/img/7d0335ae-7bba-42fb-861a-60fc3ccb0331.png" alt="7d0335ae-7bba-42fb-861a-60fc3ccb0331"></p>
<p>消费者想要调用提供者，就想要提供者启动一个 <strong>web 服务</strong>，然后通过<strong>请求客户端</strong>发送 HTTP 或者其他协议的请求来调用。</p>
<p>比如请求 acknight.com&#x2F;order 地址后，提供者会调用 orderService 的 order 方法：</p>
<p><img src="/img/769d50cf-7f2d-4a52-b20d-d9dbf83788c8.png" alt="769d50cf-7f2d-4a52-b20d-d9dbf83788c8"></p>
<p>但如果提供者提供了多个服务和方法，每个接口和方法都要单独写一个接口？消费者要针对每个接口写一段 HTTP 调用逻辑吗？</p>
<p>其实可以提供一个统一的服务调用接口，通过<strong>请求处理器</strong>根据客户端的请求参数来进行不同的处理、调用不同的服务和方法。</p>
<p>可以在服务提供者程序维护一个<strong>本地服务注册器</strong>，记录服务和对应实现类的映射。</p>
<p>比如消费者要调用 orderService 服务的 order 方法，可以发送请求，参数为 service&#x3D;orderService,method&#x3D;order，然后请求处理器会根据 service 从服务注册器中找到对应的服务实现类，并且通过 Java 的反射机制调用 method 指定的方法。</p>
<p><img src="/img/5cd8205c-87ca-4d4d-98bb-ff5f77054f10.png" alt="5cd8205c-87ca-4d4d-98bb-ff5f77054f10"></p>
<p>想要注意的是，由于 Java 对象无法直接在网络中传输，所以要对传输的参数进行<strong>序列化</strong>和<strong>反序列化</strong>。</p>
<p><img src="/img/cc136568-ef60-4ceb-a946-9089e26fc945.png" alt="cc136568-ef60-4ceb-a946-9089e26fc945"></p>
<p>为了简化消费者发请求的代码，实现类似本地调用的体验。可以基于代理模式，为消费者要调用的接口生成一个代理对象，由代理对象完成请求和响应的过程。</p>
<p>所谓代理，就是有人帮你做一些事情，不用自己操心。</p>
<p>至此，一个最简易的 RPC 框架架构图诞生了：</p>
<p><img src="/img/63ec9c7e-7abc-4e44-bc4c-541a2a73e712.png" alt="63ec9c7e-7abc-4e44-bc4c-541a2a73e712"></p>
<p>图中虚线部分就是 RPC 框架想要提供的模块和能力。</p>
<h3 id="扩展设计"><a href="#扩展设计" class="headerlink" title="扩展设计"></a>扩展设计</h3><p>虽然上述设计已经跑通了基本调用流程，但离一个完备的 RPC 框架还有很大的差距，让我们带着问题来进一步完善下架构设计。</p>
<ol>
<li><h4 id="服务注册发现"><a href="#服务注册发现" class="headerlink" title="服务注册发现"></a>服务注册发现</h4><p>问题 1：消费者如何知道提供者的调用地址呢？</p>
<p>类比生活场景，我们点外卖时，外卖小哥如何知道我们的地址和店铺的地址？肯定是买家和卖家分别填写了地址，由平台来保存。</p>
<p>因此，我们想要一个<strong>注册中心</strong>，来保存提供者的地址。消费者要调用服务时，只需要从注册中心获取对应服务的提供者地址即可。</p>
<p><img src="/img/ea75a4f7-1e1c-483d-9a5b-78ef915d3380.png" alt="ea75a4f7-1e1c-483d-9a5b-78ef915d3380"></p>
<p>一般用现成的第三方注册中心，比如 Redis、Zookeeper、Nacos等。</p>
</li>
<li><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>问题 2：如果有多个服务提供者，消费者应该调用哪个服务提供者呢？</p>
<p>我们可以给服务调用方增加负载均衡能力，通过指定不同的算法来决定调用哪一个服务提供者，比如轮询、随机、根据性能动态调用等。</p>
<p><img src="/img/f574b8b4-8b46-45fc-ab39-f785b0651805.png" alt="f574b8b4-8b46-45fc-ab39-f785b0651805"></p>
</li>
<li><h4 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h4><p>问题 3：如果服务调用失败，应该如何处理？</p>
<p>为了保证分布式系统的高可用，我们通常会给服务的调用增加一定的容错机制，比如失败重试、降级调用其他接口等。</p>
<p><img src="/img/74e4e5d7-2c31-4d26-bea7-059af2aa50b5.png" alt="74e4e5d7-2c31-4d26-bea7-059af2aa50b5"></p>
</li>
<li><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>除了上面几个经典设计外，如果想要做一个优秀的 RPC 框架，还要考虑很多问题。</p>
<p>比如：</p>
<ul>
<li><p>服务提供者下线了怎么办？想要一个失效节点剔除机制。</p>
</li>
<li><p>服务消费者每次都从注册中心拉去信息，性能会不会很差？可以使用缓存来优化性能。</p>
</li>
<li><p>如何优化 RPC 框架的传输通讯性能？比如选择合适的网络框架、自定义协议头、节约传输体积等。</p>
</li>
<li><p>如何让整个框架更利于扩展？比如使用 Java 的 SPI 机制、配置化等。</p>
</li>
<li><p>…</p>
</li>
</ul>
</li>
</ol>
<h2 id="三、开发简易版-RPC框架"><a href="#三、开发简易版-RPC框架" class="headerlink" title="三、开发简易版 RPC框架"></a>三、开发简易版 RPC框架</h2><p><img src="/img/63ec9c7e-7abc-4e44-bc4c-541a2a73e712.png" alt="63ec9c7e-7abc-4e44-bc4c-541a2a73e712"></p>
<h3 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h3><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><p>首先创建一个项目根目录 <strong>my-rpc</strong>，然后使用IDEA开发工具依次创建几个 Maven 模块。</p>
<ul>
<li>example-common：示例代码的公共依赖，包括接口、Model等。</li>
<li>example-consumer：示例服务消费者代码。</li>
<li>example-provider：示例服务提供者代码。</li>
<li>my-rpc-easy：简易版 RPC 框架</li>
</ul>
<p>在示例项目中，我们将以一个最简单的用户服务为例，演示整个服务调用过程。</p>
<h4 id="example-common-公共模块"><a href="#example-common-公共模块" class="headerlink" title="example-common 公共模块"></a>example-common 公共模块</h4><p>公共模块需要同时被消费者和服务提供者引入，主要是编写和服务相关的接口和数据模型。</p>
<ul>
<li>编写一个用户实体类 User：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.common.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，对象需要实现序列化接口，为后续网络传输序列化提供支持。</p>
<ul>
<li>编写用户服务接口UserService，提供一个获取用户的方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.common.serveice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.common.model.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="example-provider-服务提供者"><a href="#example-provider-服务提供者" class="headerlink" title="example-provider 服务提供者"></a>example-provider 服务提供者</h4><p>服务提供者是真正实现了接口的模块。</p>
<ul>
<li>在 <strong>pom.xml</strong> 文件中引入依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.acknight<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-rpc-easy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.acknight<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>编写服务实现类，实现公共模块中定义的用户服务接口。</p>
<p>功能是打印用户的名称，并返回参数中的用户对象。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.provider.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.common.model.User;</span><br><span class="line"><span class="keyword">import</span> com.acknight.common.serveice.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户服务实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + user.getName());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写服务提供者启动类 EasyProviderExample，之后会在该类的main方法中编写提供服务的代码。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.provider;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易服务提供者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyProviderExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 提供服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="example-consumer-服务消费者"><a href="#example-consumer-服务消费者" class="headerlink" title="example-consumer 服务消费者"></a>example-consumer 服务消费者</h4><p>服务消费者是需要调用服务的模块。</p>
<ul>
<li>在 <strong>pom.xml</strong> 文件中引入依赖，和提供者模块的依赖一致</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.acknight<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-rpc-easy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.acknight<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建服务消费者启动类 EasyConsumerExample，编写调用接口的代码。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.comsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.common.model.User;</span><br><span class="line"><span class="keyword">import</span> com.acknight.common.serveice.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易服务消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyConsumerExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要获取 UserService 的实现类对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;ACKnight&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> userService.getUser(user);</span><br><span class="line">        <span class="keyword">if</span> (newUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(newUser.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;user == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，现在是无法获取到userService示例的，所以预留为null。我们之后的目标是，能够通过 RPC 框架，快速得到一个支持远程调用服务提供者的代理对象，像调用本地方法一样调用 UserService 的方法。</p>
<h4 id="web-服务器"><a href="#web-服务器" class="headerlink" title="web 服务器"></a>web 服务器</h4><p>接下来，我们要先让服务提供者提供<strong>可远程访问</strong>的服务。那么，就需要一个 web 服务器，能够接受处理请求、并返回响应。</p>
<p>web 服务器的选择有很多，比如 Spring Boot 内嵌的 Tomcat、NIO 框架的 Netty 和 Vert.x 等等。</p>
<p>我们使用高性能的 NIO 框架和 Vert.x 来作为 RPC 框架的 web服务器。</p>
<p>Vert.x 官方文档：<a href="https://vertx.io/">https://vertx.io/</a></p>
<ul>
<li>打开 <strong>my-rpc-easy</strong> 项目，引入 Vert.x 和工具类的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写一个 web 服务器的接口 HttpServe，定义统一的启动服务器方法，便于后续的扩展，比如实现多种不同的 web 服务器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.server;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HTTP服务器接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doStart</span><span class="params">(<span class="type">int</span> port)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写基于 Vert.x实现的 web 服务器 VertxHttpServe，能够监听指定端口并处理请求。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.vertx.core.Vertx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VertxHttpServe</span> <span class="keyword">implements</span> <span class="title class_">HttpServer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doStart</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Vert.x 实例</span></span><br><span class="line">        <span class="type">Vertx</span> <span class="variable">vertx</span> <span class="operator">=</span> Vertx.vertx();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 HTTP 服务器</span></span><br><span class="line">        io.vertx.core.http.<span class="type">HttpServer</span> <span class="variable">server</span> <span class="operator">=</span> vertx.createHttpServer();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监听端口并处理请求</span></span><br><span class="line">        server.requestHandler(request -&gt; &#123;</span><br><span class="line">            <span class="comment">// 处理 HTTP 请求</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Received request: &quot;</span> + request.method() + <span class="string">&quot; &quot;</span> + request.uri());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发送 HTTP 响应</span></span><br><span class="line">            request.response()</span><br><span class="line">                    .putHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">                    .end();</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动 HTTP 服务器并监听指定端口</span></span><br><span class="line">        server.listen(port, result -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.succeeded()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Server is now listening on port &quot;</span> + port);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;Failed to start server: &quot;</span> + result.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>验证web服务器能否启动成功并接受请求。</p>
<p>修改实例服务提供者模块的 <strong>EasyProviderExample</strong> 类，编写启动 web 服务的代码。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.server.HttpServer;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.server.VertxHttpServe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易服务提供者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyProviderExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动 web 服务</span></span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VertxHttpServe</span>();</span><br><span class="line">        httpServer.doStart(<span class="number">8080</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过浏览器访问 <strong>localhost:8080</strong>，查看能否正常访问并看到输出的文字。</p>
<h4 id="本地服务注册器"><a href="#本地服务注册器" class="headerlink" title="本地服务注册器"></a>本地服务注册器</h4><p>我们现在做的简易 RPC 框架主要是跑通流程，所以暂时先不用第三方注册中心，直接把服务注册到服务提供者本地即可。</p>
<p>在 RPC 模块中创建本地服务注册器 LocalRegistry。</p>
<p>使用线程安全的 ConcurrentHashMap 存储服务注册信息，key 为服务名称、value 为服务的实现类。之后就可以根据要调用的服务名称获取到对应的实现类，然后通过反射进行方法调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册信息存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> implClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String serviceName, Class&lt;?&gt; implClass)</span> &#123;</span><br><span class="line">        map.put(serviceName, implClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; get(String serviceName) &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(serviceName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String serviceName)</span> &#123;</span><br><span class="line">        map.remove(serviceName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，本地服务注册器和注册中心的作用是有区别的。注册中心的作用侧重于管理注册的服务、提供服务信息给消费者；而本地服务注册器的作用是根据服务名获取对应的实现类，是完全调用必不可少的模块。</p>
<p>服务提供者启动时，需要注册服务到注册器中，修改 <strong>EasyProviderExample</strong> 代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.common.server.UserService;</span><br><span class="line"><span class="keyword">import</span> com.acknight.provider.server.Impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.registry.LocalRegistry;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.server.HttpServer;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.server.VertxHttpServe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易服务提供者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyProviderExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 注册服务</span></span><br><span class="line">        LocalRegistry.register(UserService.class.getName(), UserServiceImpl.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动 web 服务</span></span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VertxHttpServe</span>();</span><br><span class="line">        httpServer.doStart(<span class="number">8080</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h4><p>服务在本地注册后，我们就可以根据请求信息取出实现类并调用方法了。</p>
<p>但是在编写处理请求的逻辑前，我们要先实现序列化器模块。因为无论是请求或响应，都会涉及参数的传输。而 Java 对象是存活在 JVM 虚拟机中的，如果想在其他位置存储并访问、或者在网络中进行传输，就需要进行序列化和反序列化。</p>
<h5 id="什么是序列化和反序列化？"><a href="#什么是序列化和反序列化？" class="headerlink" title="什么是序列化和反序列化？"></a>什么是序列化和反序列化？</h5><ul>
<li>序列化：将 Java 对象转为可传输的字节数组。</li>
<li>反序列化：将字节数组转换为 Java 对象。</li>
</ul>
<p>有很多种不同的序列化方式，比如 Java 原生序列化、JSON、Hessian、Kryo、protobuf 等。</p>
<ul>
<li>在 RPC 模块中编写序列化接口 Serializer，提供序列化和反序列化两个方法，便于后续扩展更多的序列化器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="type">byte</span>[] serialize(T object) <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>基于 Java 自带的序列化器实现 JdkSerializer。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK 序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkSerializer</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T object) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="提供者处理调用-请求处理器"><a href="#提供者处理调用-请求处理器" class="headerlink" title="提供者处理调用 - 请求处理器"></a>提供者处理调用 - 请求处理器</h4><p>请求处理器是 RPC 框架的实现关键，它的作用是：处理接收到的请求，并根据请求参数找到对应的服务和方法，通过反射实现调用，最后封装返回结果并响应请求。</p>
<ul>
<li><p>在 RPC 模块中编写请求和响应封装类。</p>
<blockquote>
<p>RPC模块</p>
<ul>
<li>model<ul>
<li>RpcRequest</li>
<li>RpcResponse</li>
</ul>
</li>
</ul>
</blockquote>
<p>请求类 RpcRequest 的作用是封装调用所需的信息，比如服务名称、方法名称、调用参数的类型列表、参数列表。这些都是 Java 反射机制所需的参数。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RPC请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数类型列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	响应类 RpcResponse 的作用是封装调用方法得到的返回值、以及调用	的信息（比如异常情况）等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RPC响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcResponse</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据类型（预留）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt; dataType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Exception exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>编写请求处理器 HttpServerHandler。</p>
<blockquote>
<p>RPC模块</p>
<ul>
<li>server<ul>
<li>HttpServer</li>
<li>HttpServerHandler</li>
<li>VertxHttpServe</li>
</ul>
</li>
</ul>
</blockquote>
<p>业务流程如下：</p>
<ol>
<li>反序列化请求为对象，并从请求对象中获取参数。</li>
<li>根据服务名称从本地注册器中获取到对应的服务实现类。</li>
<li>通过反射机制调用方法，得到返回结果。</li>
<li>对返回结果进行封装和序列化，并写入到响应中。</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.model.RpcRequest;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.model.RpcResponse;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.registry.LocalRegistry;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.serializer.JdkSerializer;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.serializer.Serializer;</span><br><span class="line"><span class="keyword">import</span> io.vertx.core.Handler;</span><br><span class="line"><span class="keyword">import</span> io.vertx.core.buffer.Buffer;</span><br><span class="line"><span class="keyword">import</span> io.vertx.core.http.HttpServerRequest;</span><br><span class="line"><span class="keyword">import</span> io.vertx.core.http.HttpServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServerHandler</span> <span class="keyword">implements</span> <span class="title class_">Handler</span>&lt;HttpServerRequest&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServerRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定序列化器</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Serializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkSerializer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Received request: &quot;</span> + request.method() + <span class="string">&quot; &quot;</span> + request.uri());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异步处理 HTTP 请求</span></span><br><span class="line">        request.bodyHandler(body -&gt; &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = body.getBytes();</span><br><span class="line">            <span class="type">RpcRequest</span> <span class="variable">rpcRequest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rpcRequest = serializer.deserialize(bytes, RpcRequest.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 构造响应对象</span></span><br><span class="line">            <span class="type">RpcResponse</span> <span class="variable">rpcResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcResponse</span>();</span><br><span class="line">            <span class="comment">// 如果请求为null，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (rpcRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">                rpcResponse.setMessage(<span class="string">&quot;rpcRequest is null&quot;</span>);</span><br><span class="line">                doRequest(request, rpcResponse, serializer);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取要调用的服务实现类，通过反射调用</span></span><br><span class="line">                Class&lt;?&gt; implClass = LocalRegistry.get(rpcRequest.getServiceName());</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> implClass.getMethod(rpcRequest.getMethodName(), rpcRequest.getParameterTypes());</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(implClass.newInstance(), rpcRequest.getArgs());</span><br><span class="line">                <span class="comment">// 封装返回结果</span></span><br><span class="line">                rpcResponse.setData(result);</span><br><span class="line">                rpcResponse.setDataType(method.getReturnType());</span><br><span class="line">                rpcResponse.setMessage(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                rpcResponse.setMessage(e.getMessage());</span><br><span class="line">                rpcResponse.setException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 响应</span></span><br><span class="line">            doRequest(request, rpcResponse, serializer);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doRequest</span><span class="params">(HttpServerRequest request, RpcResponse rpcResponse, Serializer serializer)</span> &#123;</span><br><span class="line">        <span class="type">HttpServerResponse</span> <span class="variable">response</span> <span class="operator">=</span> request.response()</span><br><span class="line">                .putHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">byte</span>[] serialized = serializer.serialize(rpcResponse);</span><br><span class="line">            response.end(Buffer.buffer(serialized));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            response.end(Buffer.buffer());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要注意，不同的 web 服务器对应的请求处理器实现方式也不同，比如 Vert.x 中是通过实现 <strong>hanlder<HttpServerRequest></strong> 接口来自定义处理器的。并且通过 <strong>request.bodyHandler</strong> 异步处理请求。</p>
<ul>
<li>给 HttpServer 绑定请求处理器。</li>
</ul>
<p>修改VertxHttpServer的代码，通过 <strong>server.requestHandler</strong> 绑定处理器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.vertx.core.Vertx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VertxHttpServe</span> <span class="keyword">implements</span> <span class="title class_">HttpServer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doStart</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Vert.x 实例</span></span><br><span class="line">        <span class="type">Vertx</span> <span class="variable">vertx</span> <span class="operator">=</span> Vertx.vertx();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 HTTP 服务器</span></span><br><span class="line">        io.vertx.core.http.<span class="type">HttpServer</span> <span class="variable">server</span> <span class="operator">=</span> vertx.createHttpServer();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监听端口并处理请求</span></span><br><span class="line">        server.requestHandler(<span class="keyword">new</span> <span class="title class_">HttpServerHandler</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启动 HTTP 服务器并监听指定端口</span></span><br><span class="line">        server.listen(port, result -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.succeeded()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Server is now listening on port &quot;</span> + port);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;Failed to start server: &quot;</span> + result.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，引入了 RPC 框架的服务提供者模块，已经能够接受请求并完成服务调用了。</p>
<h4 id="消费方发起调用-代理"><a href="#消费方发起调用-代理" class="headerlink" title="消费方发起调用 - 代理"></a>消费方发起调用 - 代理</h4><p>在项目准备阶段，我们已经预留了一段调用服务的代码，只要能够获取到 UserService 对象（实现类），就能够跑通整个流程。</p>
<p>但 UserService 的实现类从哪来？</p>
<p>总不能把服务提供者的 UserServiceImpl 复制粘贴到消费者模块吧？要能那样做还需要 RPC 框架干什么？分布式系统中，我们调用其他项目或团队提供的接口时，一般只关注请求参数和响应结果，而不是关注具体实现。</p>
<p>在之前的架构中讲过，我们可以通过生成代理对象来简化消费方的调用。</p>
<p>代理的实现方式大致分为 2 类：静态代理和动态代理。</p>
<h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p>静态代理是指为每一个特定类型的接口或对象，编写一个代理类。</p>
<p>比如在 <strong>example-consumer</strong> 模块中，创建一个静态代理 UserServiceProxy，实现 UserService 接口和 getUser 方法。</p>
<blockquote>
<p>example-consumer</p>
<ul>
<li>EasyConsumerExample</li>
<li>UserServiceProxy</li>
</ul>
</blockquote>
<p>只不过实现 getUser 方法时，不是复制粘贴提供者 UserServiceImpl 中的代码，而是要构造 HTTP 请求去调用服务提供者。</p>
<p>需要注意发送前要将参数序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.comsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> com.acknight.common.model.User;</span><br><span class="line"><span class="keyword">import</span> com.acknight.common.serveice.UserService;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.model.RpcRequest;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.model.RpcResponse;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.serializer.JdkSerializer;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.serializer.Serializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 指定序列化器</span></span><br><span class="line">        <span class="type">Serializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkSerializer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发请求</span></span><br><span class="line">        <span class="type">RpcRequest</span> <span class="variable">rpcRequest</span> <span class="operator">=</span> RpcRequest.builder()</span><br><span class="line">                .serviceName(UserService.class.getName())</span><br><span class="line">                .methodName(<span class="string">&quot;getUser&quot;</span>)</span><br><span class="line">                .parameterTypes(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;User.class&#125;)</span><br><span class="line">                .args(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;user&#125;)</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bodyBytes = serializer.serialize(rpcRequest);</span><br><span class="line">            <span class="type">byte</span>[] result;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> HttpRequest.post(<span class="string">&quot;hppt://localhost:8080&quot;</span>)</span><br><span class="line">                    .body(bodyBytes)</span><br><span class="line">                    .execute()) &#123;</span><br><span class="line">                result = httpResponse.bodyBytes();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">RpcResponse</span> <span class="variable">rpcResponse</span> <span class="operator">=</span> serializer.deserialize(result, RpcResponse.class);</span><br><span class="line">            <span class="keyword">return</span> (User) rpcResponse.getData();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后修改 EasyConsumerExample，new 一个代理对象并赋值给 userService，就能完成调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.comsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.common.model.User;</span><br><span class="line"><span class="keyword">import</span> com.acknight.common.serveice.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易服务消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyConsumerExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过静态代理获取 UserService 的实现类对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceProxy</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;ACKnight&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> userService.getUser(user);</span><br><span class="line">        <span class="keyword">if</span> (newUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(newUser.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;user == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态代理虽然很好理解（就是写个实现类），但缺点也很明显，我们如果要给每个服务接口写一个实现类，是非常麻烦的，这种代理方式的灵活性很差。</p>
<p>所以 RPC 框架中，我们会使用动态代理。</p>
<h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>动态代理的作用是，根据生成的对象的类型，自动生成一个代理对象。</p>
<p>常用的动态代理实现方式有 JDK 动态代理和基于字节码生成的动态代理（比如 CGLIB）。前者简单易用，无需引入额外的库，但缺点是只能对接口进行代理；后者更灵活、可以对任何类进行代理，但性能略低于 JDK 动态代理。</p>
<ul>
<li>在 RPC 模块中编写动态代理类 ServiceProxy，需要实现 InvocationHandler 接口的 invoke 方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.model.RpcRequest;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.model.RpcResponse;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.serializer.JdkSerializer;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.serializer.Serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务代理（JDK 动态代理）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 指定序列化器</span></span><br><span class="line">        <span class="type">Serializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkSerializer</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造请求</span></span><br><span class="line">        <span class="type">RpcRequest</span> <span class="variable">rpcRequest</span> <span class="operator">=</span> RpcRequest.builder()</span><br><span class="line">                .serviceName(method.getDeclaringClass().getName())</span><br><span class="line">                .methodName(method.getName())</span><br><span class="line">                .parameterTypes(method.getParameterTypes())</span><br><span class="line">                .args(args)</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = serializer.serialize(rpcRequest);</span><br><span class="line">            <span class="comment">// 发送请求</span></span><br><span class="line">            <span class="comment">// 这里地址被硬编码了（需要使用注册中心和服务发现机制解决）</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">HttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> HttpRequest.post(<span class="string">&quot;http://localhost:8080&quot;</span>)</span><br><span class="line">                    .body(bytes)</span><br><span class="line">                    .execute()) &#123;</span><br><span class="line">                <span class="type">byte</span>[] result = httpResponse.bodyBytes();</span><br><span class="line">                <span class="comment">// 反序列化</span></span><br><span class="line">                <span class="type">RpcResponse</span> <span class="variable">rpcResponse</span> <span class="operator">=</span> serializer.deserialize(result, RpcResponse.class);</span><br><span class="line">                <span class="keyword">return</span> rpcResponse.getData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码，当用户调用某个接口的方法时，会改为调用 invoke 方法。在 invoke 方法中，我们可以获取到要调用的方法信息、传入的参数列表等，这不就是我们服务提供者需要的参数么？用这些参数来构造请求对象就可以完成调用了。</p>
<p>需要注意的时，上述代码中，请求的服务提供者地址被硬编码了，需要使用注册中心和服务发现机制来解决。</p>
<ul>
<li><p>创建动态代理工厂 ServiceProxyFactory，作用是根据指定类创建动态代理对象。</p>
<blockquote>
<p>RPC 模块</p>
<ul>
<li>proxy<ul>
<li>ServiceProxy</li>
<li>ServiceProxyFactory</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
<p>这里使用了工厂模式，来简化对象的创建过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.rpc.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务代理工厂（用于创建代理对象）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据服务类获取代理对象</span></span><br><span class="line"><span class="comment">     * 使用Proxy.newProxyInstance方法生成代理对象，这是Java反射API中创建动态代理的标准方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; serviceClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(</span><br><span class="line">                serviceClass.getClassLoader(), <span class="comment">//使用接口的类加载器加载代理类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;serviceClass&#125;, <span class="comment">// 代理类实现的接口列表，此处仅为传入的serviceClass</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServiceProxy</span>()); <span class="comment">// 实现InvocationHandler接口的实例，负责处理方法调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中，主要是通过 <strong>Proxy.newProxyInstance</strong> 方法为指定类型创建代理对象。</p>
<ul>
<li>最后，在 EasyConsumerExample 中，就可以通过调用工厂来为 UserService 获取动态代理对象了。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.acknight.comsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.acknight.common.model.User;</span><br><span class="line"><span class="keyword">import</span> com.acknight.common.serveice.UserService;</span><br><span class="line"><span class="keyword">import</span> com.acknight.rpc.proxy.ServiceProxyFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简易服务消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyConsumerExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 动态代理获取 UserService 对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ServiceProxyFactory.getProxy(UserService.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;ACKnight&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> userService.getUser(user);</span><br><span class="line">        <span class="keyword">if</span> (newUser != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(newUser.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;user == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，简易版的 RPC 框架已经开发完成。</p>
<h2 id="四、测试验证"><a href="#四、测试验证" class="headerlink" title="四、测试验证"></a>四、测试验证</h2><ol>
<li><p>以 debug 模式启动服务提供者，执行 main 方法。</p>
</li>
<li><p>以 debug 模式启动服务消费者，执行 main 方法。</p>
<p>在 ServiceProxy 代理类中添加断点，可以看到 userService 时，实际是调用了代理对象的 invoke 方法，并且获取到了 ServiceName、methodName、参数类型和列表等信息。<img src="/img/53219879-c6f4-4573-af51-74303e9bb7af.png" alt="53219879-c6f4-4573-af51-74303e9bb7af"></p>
</li>
<li><p>继续 debug，就可以看到序列化后的请求对象，结构是字节数组。</p>
<p><img src="/img/ca81de23-6eae-4fda-bfad-b833a0162e4b.png" alt="ca81de23-6eae-4fda-bfad-b833a0162e4b"></p>
</li>
<li><p>在服务提供者模块的请求处理器中打断点，可以看到接受并反序列化后的请求，跟发送时的内容一致。</p>
<p><img src="/img/ea2773a5-7f5e-4b42-a1da-0f9bac9ae655.png" alt="ea2773a5-7f5e-4b42-a1da-0f9bac9ae655"></p>
</li>
<li><p>继续 debug，可以看到在请求处理器中，通过反射成功调用了方法，并得到返回的 User 对象。</p>
<p><img src="/img/307cf3d3-da97-4059-863f-0a4cb05321a8.png" alt="307cf3d3-da97-4059-863f-0a4cb05321a8"></p>
</li>
<li><p>最后，在服务提供者和消费者模块中都输出了用户名称，说明整个过程成功。</p>
<p><img src="/img/b8fa0a3a-5617-4587-bc93-320446d9a1f2.png" alt="b8fa0a3a-5617-4587-bc93-320446d9a1f2"></p>
</li>
</ol>
<p>​	<img src="/img/4e8a782d-9f3c-48d2-891c-6b2708277722.png" alt="4e8a782d-9f3c-48d2-891c-6b2708277722"></p>
<p>至此，简易版 RPC 框架实现完成。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
